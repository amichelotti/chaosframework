import os
num_cpu = int(os.environ.get('NUM_CPU', 2))
SetOption('num_jobs', num_cpu)
print "running with -j", GetOption('num_jobs')

buildMode = ARGUMENTS.get('mode', 'release')   #holds current mode
debugcflags = ['-Wall', '-DDEBUG']   #extra compile flags for debug
releasecflags = ['-O2', '-DNDEBUG']         #extra compile flags for release

print '**** Compiling in ' + buildMode + ' mode...'
# --- options ----

options = {}

def add_option( name, help , nargs , contibutesToVariantDir , dest=None ):

    if dest is None:
        dest = name

    AddOption( "--" + name , 
                dest=dest,
                type="string",
                nargs=nargs,
                action="store",
                help=help )

    options[name] = { "help" : help ,
                      "nargs" : nargs , 
                      "contibutesToVariantDir" : contibutesToVariantDir ,
                      "dest" : dest } 

def get_option( name ):
    return GetOption( name )

def has_option( name ):
    x = get_option( name )
    if x is None:
        return False

    if x == False:
        return False

    if x == "":
        return False

    return True

def get_variant_dir():

    a = []

    for name in options:
        o = options[name]
        if not has_option( o["dest"] ):
            continue
        if not o["contibutesToVariantDir"]:
            continue

        if o["nargs"] == 0:
            a.append( name )
        else:
            a.append( name + "-" + get_option( name ) )

    s = "build/"

    if len(a) > 0:
        a.sort()
        s += "/".join( a ) + "/"

    return s


    
#---------add option tomake the Chaos Lib Shared

sourceTarget = 'ControlUnitTest'
sourceFiles = Glob( "*.cpp" )

#make sure the sconscripts can get to the variables
add_option( "64" , "whether to force 64 bit" , 0 , True , "force64" )
add_option( "32" , "whether to force 32 bit" , 0 , True , "force32" )
force32 = has_option( "force32" )
force64 = has_option( "force64" )

if not force64 and not force32:
    force64 = True
    print( "*** assuming you want a 64-bit*** " )
msarch = None
if force32:
    msarch = "x86"
elif force64:
    msarch = "x86_64"

env = Environment(      MSVS_ARCH=msarch ,
                        TARGET_ARCH=msarch
                        )  # Initialize the environment
Export('env', 'buildMode', 'debugcflags', 'releasecflags')

if force32:
    processor = "i386"
if force64:
    processor = "x86_64"

env['PROCESSOR_ARCHITECTURE'] = processor

if force64:
        env.Append( CFLAGS="-m64" )
        env.Append( CXXFLAGS="-m64" )
        env.Append( LINKFLAGS="-m64" )

if force32:
        env.Append( CFLAGS="-m32 -march=i686" )
        env.Append( CXXFLAGS="-m32 -march=i686" )
        env.Append( LINKFLAGS="-m32 -march=i686" )

if buildMode == 'debug':
   env.Append(CCFLAGS=debugcflags)
else:
   env.Append(CCFLAGS=releasecflags)

env.Append(LIBPATH = ['/usr/lib', '/usr/local/lib'])
env.Program(sourceTarget, sourceFiles, LIBS=['chaos_cutoolkit', 'chaos_common', 'boost_program_options', 'boost_system','boost_thread', 'boost_chrono', 'boost_regex','boost_log','boost_log_setup','memcached','msgpack','msgpack-rpc','mpio'])