# -*- mode: python; -*-
# build file for ChaosLibrary
# this requires scons
# you can get from http://www.scons.org
# then just type scons

EnsureSConsVersion(0, 98, 4) # this is a common version known to work

import os
import sys
import imp
import types
import re
import shutil
import urllib
import urllib2
import socket
import time
import socket
import subprocess


buildMode = ARGUMENTS.get('mode', 'release')   #holds current mode
debugcflags = ['-Wall', '-GX', '-EHsc', '-DDEBUG']   #extra compile flags for debug
releasecflags = ['-O2', '-EHsc', '-DNDEBUG']         #extra compile flags for release

print '**** Compiling in ' + buildMode + ' mode...'

# --- options ----

options = {}

def add_option( name, help , nargs , contibutesToVariantDir , dest=None ):

    if dest is None:
        dest = name

    AddOption( "--" + name , 
                dest=dest,
                type="string",
                nargs=nargs,
                action="store",
                help=help )

    options[name] = { "help" : help ,
                      "nargs" : nargs , 
                      "contibutesToVariantDir" : contibutesToVariantDir ,
                      "dest" : dest } 

def get_option( name ):
    return GetOption( name )

def has_option( name ):
    x = get_option( name )
    if x is None:
        return False

    if x == False:
        return False

    if x == "":
        return False

    return True

def get_variant_dir():

    a = []

    for name in options:
        o = options[name]
        if not has_option( o["dest"] ):
            continue
        if not o["contibutesToVariantDir"]:
            continue

        if o["nargs"] == 0:
            a.append( name )
        else:
            a.append( name + "-" + get_option( name ) )

    s = "build/"

    if len(a) > 0:
        a.sort()
        s += "/".join( a ) + "/"

    return s


    
#---------add option tomake the Chaos Lib Shared
libName = 'chaos_common'

add_option( "static", "build the chaos cu toolkit shared" , 0 , False )
add_option( "prefix", "build the chaos cu toolkit shared" , 1 , False )

env = Environment(CPPPATH=os.path.abspath('.'))  # Initialize the environment

if has_option( 'prefix' ):
    installDir = get_option('prefix') 
else:
    installDir = "/usr/local"

print "prefix:",installDir
print "libName:",libName


print "running with -j", GetOption('num_jobs')


 
#setup the version
subprocess.call(os.path.abspath("version.sh"), shell=True)
 
#make sure the sconscripts can get to the variables
Export('env', 'buildMode', 'debugcflags', 'releasecflags')

sourceFiles = Glob( "*.cpp" )
sourceFiles += Glob( "bson/*.cpp" )
sourceFiles += Glob( "bson/util/*.cpp" )
sourceFiles += Glob( "bson/lib/*.cpp" )
sourceFiles += Glob( "bson/lib/*.c" )
sourceFiles += Glob( "configuration/*.cpp" )
sourceFiles += Glob( "pool/*.cpp" )
sourceFiles += Glob( "data/*.cpp" )
sourceFiles += Glob( "thread/*.cpp" )
sourceFiles += Glob( "utility/*.cpp" )
sourceFiles += Glob( "general/*.cpp" )
sourceFiles += Glob( "pqueue/*.cpp" )
sourceFiles += Glob( "rpc/*.cpp" )
sourceFiles += Glob( "rpcnet/*.cpp" )
sourceFiles += Glob( "dispatcher/*.cpp" )
sourceFiles += Glob( "action/*.cpp" )
sourceFiles += Glob( "io/*.cpp" )

if buildMode == 'debug':
   env.Append(CCFLAGS=debugcflags)
else:
   env.Append(CCFLAGS=releasecflags)



if has_option( "static" ):
    libName = str( env.StaticLibrary(libName, sourceFiles)[0] )
else:
    env.Append(LIBPATH = ['/usr/lib', '/usr/local/lib'])
    libName = str( env.SharedLibrary(libName, sourceFiles, LIBS=['boost_program_options', 'boost_system','boost_thread','boost_chrono','boost_regex','memcached','msgpack','msgpack-rpc','mpio'])[0] )
print "Lib file created: " + libName
    
#headers
for id in [ "", "bson/", "bson/util/", "bson/lib/", "configuration/", "pool/", "data/" , "thread/" , "utility/" , "general/" , "pqueue/" , "rpc/", "rpcnet/", "dispatcher/" , "action/" , "io/" ]:
    for hFile in Glob( id + "*.h" ):
        installHeaderPath = installDir + "/" + "include" + "/chaos/common/" + id
        env.Install( installHeaderPath , hFile )
        env.Alias('install-inc', [installHeaderPath])

#lib
print "install library into: "+installDir + "/lib/"
env.Install( installDir + "/lib/", libName )
env.Alias('install-lib', [installDir + "/lib/"])

env.Alias('install', ['install-lib', 'install-inc'])
