SET(common_lib_src log/LogManager.cpp action/ActionExecutionSafetySystem.cpp action/EventAction.cpp action/ActionDescriptor.cpp action/DeclareAction.cpp action/DomainActions.cpp bson/bsonobj.cpp bson/oid.cpp bson/lib/base64.cpp bson/lib/md5.c bson/lib/nonce.cpp bson/util/json.cpp configuration/GlobalConfiguration.cpp data/CDataWrapper.cpp data/CUSchemaDB.cpp dispatcher/DefaultEventDispatcher.cpp dispatcher/EventTypeScheduler.cpp dispatcher/AbstractEventDispatcher.cpp dispatcher/AbstractCommandDispatcher.cpp dispatcher/DefaultCommandDispatcher.cpp dispatcher/DomainActionsScheduler.cpp  dispatcher/AbstractEventDispatcher.cpp event/EventClient.cpp event/AsioImplEventClient event/AsioEventForwarder.cpp event/EventServer.cpp event/AsioImplEventServer.cpp event/AsioEventHandler.cpp event/evt_desc/EventDescriptor.cpp event/evt_desc/AlertEventDescriptor.cpp event/evt_desc/InstrumentEventDescriptor.cpp event/evt_desc/CommandEventDescriptor.cpp event/evt_desc/CustomEventDescriptor.cpp event/channel/EventChannel.cpp event/channel/AlertEventChannel.cpp event/channel/InstrumentEventChannel.cpp io/IODataDriver.cpp io/IOMemcachedDriver.cpp io/OutputMongoDataDriver.cpp message/DeviceMessageChannel.cpp message/MDSMessageChannel.cpp network/NetworkBroker.cpp message/MessageChannel.cpp rpc/RpcClient.cpp rpc/RpcServer.cpp rpc/msgpack/MsgPackClient.cpp rpc//msgpack/MsgPackServer.cpp thread/CThread.cpp thread/CThreadGroup.cpp utility/NamedService.cpp utility/ISDInterface.cpp)

SET(common_lib_library boost_program_options boost_system boost_thread boost_chrono boost_regex boost_log boost_log_setup memcached msgpack msgpack-rpc mpio)

find_library(BOOST_PO boost_program_options PATHS /usr/lib,/usr/local/lib,usr/local/lib DOC "boost_program_options library")
if(NOT BOOST_PO)
    message(FATAL_ERROR "Library boost_program_options required, but not found!")
endif(NOT BOOST_PO)

find_library(BOOST_SY boost_system PATHS /usr/lib,/usr/local/lib,usr/local/lib DOC "boost_system library")
if(NOT BOOST_SY)
    message(FATAL_ERROR "Library boost_system required, but not found!")
endif(NOT BOOST_SY)

find_library(BOOST_TH boost_thread PATHS /usr/lib,/usr/local/lib,usr/local/lib DOC "boost_thread library")
if(NOT BOOST_TH)
    message(FATAL_ERROR "Library boost_thread required, but not found!")
endif(NOT BOOST_TH)

find_library(BOOST_CH boost_chrono PATHS /usr/lib,/usr/local/lib,usr/local/lib DOC "boost_chrono library")
if(NOT BOOST_CH)
    message(FATAL_ERROR "Library boost_chrono required, but not found!")
endif(NOT BOOST_CH)

find_library(BOOST_RE boost_regex PATHS /usr/lib,/usr/local/lib,usr/local/lib DOC "boost_regex library")
if(NOT BOOST_RE)
    message(FATAL_ERROR "Library boost_regex required, but not found!")
endif(NOT BOOST_RE)

find_library(BOOST_LOG boost_log PATHS /usr/lib,/usr/local/lib,usr/local/lib DOC "boost_log library")
if(NOT BOOST_LOG)
    message(FATAL_ERROR "Library boost_log required, but not found!")
endif(NOT BOOST_LOG)

find_library(BOOST_LOG_SET boost_log_setup PATHS /usr/lib,/usr/local/lib,usr/local/lib DOC "boost_log_setup library")
if(NOT BOOST_LOG_SET)
    message(FATAL_ERROR "Library boost_log_setup required, but not found!")
endif(NOT BOOST_LOG_SET)

find_library(MEMCACHED_LIB memcached PATHS /usr/lib,/usr/local/lib,usr/local/lib DOC "memcached library")
if(NOT MEMCACHED_LIB)
    message(FATAL_ERROR "Library memcached required, but not found!")
endif(NOT MEMCACHED_LIB)

find_library(MSGPACK_LIB msgpack PATHS /usr/lib,/usr/local/lib,usr/local/lib  DOC "msgpack library")
if(NOT MSGPACK_LIB)
    message(FATAL_ERROR "Library msgpack required, but not found!")
endif(NOT MSGPACK_LIB)

find_library(MSGPACK_RPC_LIB msgpack-rpc PATHS /usr/lib,/usr/local/lib,usr/local/lib  DOC "msgpack-rpc library")
if(NOT MSGPACK_RPC_LIB)
    message(FATAL_ERROR "Library msgpack-rpc required, but not found!")
endif(NOT MSGPACK_RPC_LIB)

find_library(MPIO_LIB mpio PATHS /usr/lib,/usr/local/lib,usr/local/lib  DOC "mpio library")
if(NOT MPIO_LIB)
    message(FATAL_ERROR "Library mpio required, but not found!")
endif(NOT MPIO_LIB)

find_library(ZMQ_LIB zmq PATHS /usr/lib,/usr/local/lib,usr/local/lib  DOC "zmq library for additional option in rpc and event")
if(ZMQ_LIB)
    message(STATUS "ZMQ library is found so additional rpc and event driver will be compiled")
     SET(DEV_WITH_ZMQ on)
    SET(common_lib_src ${common_lib_src} rpc/zmq/ZMQClient.cpp rpc/zmq/ZMQServer.cpp)
    SET(common_lib_library ${common_lib_library} zmq)
endif(ZMQ_LIB)

ADD_LIBRARY(chaos_common SHARED ${common_lib_src})

TARGET_LINK_LIBRARIES(chaos_common ${common_lib_library}) 

        
FILE(GLOB files "*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common)
FILE(GLOB files "action/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/action)
FILE(GLOB files "log/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/log)
FILE(GLOB files "bson/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/bson)
FILE(GLOB files "bson/util/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/bson/util)
FILE(GLOB files "bson/lib/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/bson/lib)
FILE(GLOB files "configuration/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/configuration)
FILE(GLOB files "data/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/data)
FILE(GLOB files "dhfsm/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/dhfsm)
FILE(GLOB files "dispatcher/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/dispatcher)
FILE(GLOB files "event/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/event)
FILE(GLOB files "event/channel/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/event/channel)
FILE(GLOB files "event/evt_desc/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/event/evt_desc)
FILE(GLOB files "exception/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/exception)
FILE(GLOB files "general/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/general)
FILE(GLOB files "io/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/io)
FILE(GLOB files "message/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/message)
FILE(GLOB files "pool/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/pool)
FILE(GLOB files "pqueue/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/pqueue)
FILE(GLOB files "rpc/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/rpc)
FILE(GLOB files "network/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/network)
FILE(GLOB files "thread/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/thread)
FILE(GLOB files "utility/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/utility)

INSTALL(TARGETS chaos_common
        DESTINATION "lib"
        PERMISSIONS OWNER_WRITE GROUP_READ WORLD_READ)