SET(common_lib_src log/LogManager.cpp action/ActionExecutionSafetySystem.cpp action/EventAction.cpp action/ActionDescriptor.cpp action/DeclareAction.cpp action/DomainActions.cpp bson/bsonobj.cpp bson/oid.cpp bson/lib/base64.cpp bson/lib/md5.c bson/lib/nonce.cpp bson/util/json.cpp configuration/GlobalConfiguration.cpp data/CDataWrapper.cpp data/CUSchemaDB.cpp data/entity_db/EntityDB.cpp data/entity_db/sqlite_impl/sqlite3.c dispatcher/DefaultEventDispatcher.cpp dispatcher/EventTypeScheduler.cpp dispatcher/AbstractEventDispatcher.cpp dispatcher/AbstractCommandDispatcher.cpp dispatcher/DefaultCommandDispatcher.cpp dispatcher/DomainActionsScheduler.cpp  dispatcher/AbstractEventDispatcher.cpp event/EventClient.cpp event/AsioImplEventClient event/AsioEventForwarder.cpp event/EventServer.cpp event/AsioImplEventServer.cpp event/AsioEventHandler.cpp event/evt_desc/EventDescriptor.cpp event/evt_desc/AlertEventDescriptor.cpp event/evt_desc/InstrumentEventDescriptor.cpp event/evt_desc/CommandEventDescriptor.cpp event/evt_desc/CustomEventDescriptor.cpp event/channel/EventChannel.cpp event/channel/AlertEventChannel.cpp event/channel/InstrumentEventChannel.cpp io/IODataDriver.cpp io/IOMemcachedDriver.cpp io/OutputMongoDataDriver.cpp message/DeviceMessageChannel.cpp message/MDSMessageChannel.cpp network/NetworkBroker.cpp message/MessageChannel.cpp rpc/RpcClient.cpp rpc/RpcServer.cpp rpc/msgpack/MsgPackClient.cpp rpc//msgpack/MsgPackServer.cpp thread/CThread.cpp thread/CThreadGroup.cpp utility/NamedService.cpp utility/ISDInterface.cpp)

SET(common_lib_library boost_program_options boost_system boost_thread boost_chrono boost_regex boost_log boost_log_setup memcached msgpack msgpack-rpc mpio)


ADD_LIBRARY(chaos_common SHARED ${common_lib_src})

TARGET_LINK_LIBRARIES(chaos_common ${common_lib_library}) 

        
FILE(GLOB files "*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common)
FILE(GLOB files "action/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/action)
FILE(GLOB files "log/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/log)
FILE(GLOB files "bson/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/bson)
FILE(GLOB files "bson/util/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/bson/util)
FILE(GLOB files "bson/lib/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/bson/lib)
FILE(GLOB files "configuration/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/configuration)
FILE(GLOB files "data/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/data)
FILE(GLOB files "data/entity_db/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/data/entity_db)
FILE(GLOB files "dhfsm/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/dhfsm)
FILE(GLOB files "dispatcher/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/dispatcher)
FILE(GLOB files "event/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/event)
FILE(GLOB files "event/channel/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/event/channel)
FILE(GLOB files "event/evt_desc/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/event/evt_desc)
FILE(GLOB files "exception/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/exception)
FILE(GLOB files "general/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/general)
FILE(GLOB files "io/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/io)
FILE(GLOB files "message/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/message)
FILE(GLOB files "pool/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/pool)
FILE(GLOB files "pqueue/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/pqueue)
FILE(GLOB files "rpc/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/rpc)
FILE(GLOB files "network/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/network)
FILE(GLOB files "thread/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/thread)
FILE(GLOB files "utility/*.h")
INSTALL(FILES ${files} DESTINATION include/chaos/common/utility)

INSTALL(TARGETS chaos_common
        DESTINATION "lib"
        PERMISSIONS OWNER_WRITE GROUP_READ WORLD_READ)