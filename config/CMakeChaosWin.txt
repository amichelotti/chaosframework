cmake_minimum_required(VERSION 2.9)
MESSAGE("WIN32 CALLED CMakeChaosWIN2")
include(${CMAKE_CURRENT_LIST_DIR}/CMakeMacroUtilsWin.txt)


### options and configuration variables ####

SET(GITSOURCE https://github.com/amichelotti)

SET (CHAOS_FRAMEWORK ${CMAKE_CURRENT_LIST_DIR}/..)
#SET (CMAKE_BINARY_DIR ${CHAOS_FRAMEWORK}/../build)


SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_LIST_DIR}")


IF(CERN_ROOT)
ADD_DEFINITIONS(-DCERN_ROOT)
ENDIF()

IF(NOT DEFINED PROCESSOR_COUNT)
  SET(PROCESSOR_COUNT 4)

  execute_process(COMMAND getconf _NPROCESSORS_ONLN
    OUTPUT_VARIABLE PROCESSOR_COUNT
	)
	
  STRING(REPLACE "\n" "" PROCESSOR_COUNT ${PROCESSOR_COUNT})

ENDIF()

option(CHAOS_FORCE32 "Set to ON to enable 32 bit compilation" OFF)
option(CHAOS_STATIC "Set static compilation" ON)
option(ENABLE_MEMCACHE "Enable Memcacahe" OFF)
option(CHAOS_DEBUG "Enable Debug" OFF)
option(CHAOS_ENABLE_C11 "Enable C11" ON)
option(CHAOS_DISABLE_EVENTFD "Disable EventFD" OFF)
option(CHAOS_BUILD_CACHE "Keep third part sources" ON)
option(CHAOS_BOOST_VERSION "Use a predefined boost version" 64)
option(CHAOS_BOOST_MINOR_VERSION "Use a predefined boost minor version" 0)
option(CHAOS_BOOST_DYNAMIC "compile and use dynamic boost" OFF)
option(CHAOS_BUILD_UNITSERVER "Automatically build an Unit Server that includes all CUs found in distribution" ON)
option(CHAOS_SANITIZER "sanitize the specified project" "")

IF(NOT CHAOS_VERSION_MAJOR)
	 SET(CHAOS_VERSION_MAJOR "1")
ENDIF()
IF(NOT CHAOS_VERSION_MINOR)
	 SET(CHAOS_VERSION_MINOR "1")
ENDIF()
IF(NOT CHAOS_BUILD_ID)
	 SET(CHAOS_BUILD_ID 666)
ENDIF()

ADD_DEFINITIONS(-DCSLIB_VERSION_MAJOR="${CHAOS_VERSION_MAJOR}")
ADD_DEFINITIONS(-DCSLIB_VERSION_MINOR="${CHAOS_VERSION_MINOR}")
ADD_DEFINITIONS(-DCSLIB_BUILD_ID=${CHAOS_BUILD_ID})

if(CMAKE_BUILD_TYPE MATCHES PROFILE)
   MESG("ENABLING PROFILE on ${PROJECT_NAME}")
   SET(GCC_COVERAGE_COMPILE_FLAGS "-O0 -g -fprofile-arcs -ftest-coverage")
   SET(GCC_COVERAGE_LINK_LIB    "gcov")

   SET(GCC_COVERAGE_LINK_FLAGS    "-fprofile-arcs -ftest-coverage -coverage")
   SET(CHAOS_LINKER_FLAGS  "${CHAOS_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")

ENDIF()

if((CMAKE_BUILD_TYPE MATCHES DEBUG) OR (CMAKE_BUILD_TYPE MATCHES Debug))
  set(CHAOS_DEBUG ON)
  MESG("ENABLING DEBUG on ${PROJECT_NAME}")
  
  
ENDIF()

if((CMAKE_BUILD_TYPE MATCHES Release) OR (CMAKE_BUILD_TYPE MATCHES RELEASE))
  MESG("ENABLING RELEASE on ${PROJECT_NAME}")
  set (CHAOS_CXX_FLAGS "${CHAOS_CXX_FLAGS} -O3")
  set (CHAOS_C_FLAGS "${CHAOS_C_FLAGS} -O3")
ENDIF()

if((CMAKE_BUILD_TYPE MATCHES RelWithDebInfo) OR (CMAKE_BUILD_TYPE MATCHES RELWITHDEBINFO))
  MESG("ENABLING RELWITHDEBINFO on ${PROJECT_NAME}")
  set (CHAOS_CXX_FLAGS "${CHAOS_CXX_FLAGS} -g -O3")
  set (CHAOS_C_FLAGS "${CHAOS_C_FLAGS} -g -O3")
ENDIF()


if((CMAKE_BUILD_TYPE MATCHES MinSizeRel) OR (CMAKE_BUILD_TYPE MATCHES MINSIZEREL))
  MESG("ENABLING MINSIZEREL on ${PROJECT_NAME}")
  set (CHAOS_CXX_FLAGS "${CHAOS_CXX_FLAGS} -Os")
  set (CHAOS_C_FLAGS "${CHAOS_C_FLAGS} -Os")
ENDIF()

if (CHAOS_DEBUG)
  MESG("Enable debug mode")
  set (CHAOS_CXX_FLAGS "${CHAOS_CXX_FLAGS} -DDEBUG")
  set (CHAOS_C_FLAGS "${CHAOS_C_FLAGS} -DDEBUG")
ENDIF()


IF( ( DEFINED ENV{CHAOS32}) OR CHAOS_FORCE_32 )
  MESG("Enabling 32 bit Compilation")
  set (BUILD_FORCE_32 1)
  set (CHAOS_C_FLAGS "${CHAOS_C_FLAGS} -m32")
  set (CHAOS_CXX_FLAGS "${CHAOS_CXX_FLAGS} -m32")
  SET( CHAOS_BOOST_FLAGS "${CHAOS_BOOST_FLAGS} cflags=-m32 cxxflags=-m32 address-model=32")
  set (CMAKE_LINK_FLAGS "-m32")
ENDIF()

IF(CHAOS_BUILD_CACHE)
  MESG("activated chaos build cache ${CACHE_DIR}")
  if(NOT EXISTS "${CACHE_DIR}")
    FILE(MAKE_DIRECTORY ${CACHE_DIR})
  ENDIF()
ENDIF()

EXECUTE_PROCESS(COMMAND uname -s OUTPUT_VARIABLE CHAOS_SYSTEM_NAME)
EXECUTE_PROCESS(COMMAND uname -m OUTPUT_VARIABLE CHAOS_SYSTEM_MACHINE)
STRING(REPLACE "\n" "" CHAOS_SYSTEM_NAME ${CHAOS_SYSTEM_NAME})
STRING(REPLACE "\n" "" CHAOS_SYSTEM_MACHINE ${CHAOS_SYSTEM_MACHINE})

#SET(SYSTEM_NAME ${CHAOS_SYSTEM_NAME})
#SET(CMAKE_SYSTEM_NAME ${CHAOS_SYSTEM_NAME})

IF (DEFINED ENV{CHAOS_TARGET} AND NOT CHAOS_TARGET)
  SET(CHAOS_TARGET $ENV{CHAOS_TARGET})
ENDIF()

IF(CHAOS_TARGET)
  SET(CHAOS_POSTFIX ${CHAOS_TARGET})
ELSE()
  SET(CHAOS_POSTFIX "${CHAOS_SYSTEM_MACHINE}-${CHAOS_SYSTEM_NAME}")
ENDIF()
SET(FrameworkLib boost_program_options boost_date_time boost_system  boost_chrono boost_regex boost_log_setup boost_log boost_filesystem boost_thread boost_atomic boost_random jsoncpp pthreadVC2)

IF ( NOT CMAKE_INSTALL_PREFIX AND DEFINED ENV{CHAOS_PREFIX} )
  set(CMAKE_INSTALL_PREFIX $ENV{CHAOS_PREFIX} CACHE FILEPATH "path")
  set(CMAKE_INSTALL_PREFIX $ENV{CHAOS_PREFIX})
  MESG("Setting Install Dir to CHAOS_PREFIX ${CMAKE_INSTALL_PREFIX}")
ELSE()
  IF(NOT DEFINED CMAKE_INSTALL_PREFIX)
    set(CMAKE_INSTALL_PREFIX ${CHAOS_FRAMEWORK}/chaos-distrib-${CHAOS_POSTFIX} CACHE FILEPATH "path")
    set(CMAKE_INSTALL_PREFIX ${CHAOS_FRAMEWORK}/chaos-distrib-${CHAOS_POSTFIX})
    MESG("Overriding default CHAOS_PREFIX to ${CMAKE_INSTALL_PREFIX}")
  ELSE()
    MESG("Default prefix ${CMAKE_INSTALL_PREFIX}")

  ENDIF()
ENDIF()


IF (CHAOS_TARGET)

  IF(${CHAOS_TARGET} MATCHES "armhf")
    MESG("checking armhf cross compilation chain....")

    CheckCompiler("CXX" arm-linux-gnueabihf-g++-4.8)
    CheckCompiler("C" arm-linux-gnueabihf-gcc-4.8)
    SET(CMAKE_SYSTEM_NAME "Linux")
    SET(CMAKE_SYSTEM_PROCESSOR "arm")
    SET(COMP_FLAGS "-D__BSON_USEMEMCPY__ -mcpu=xscale -D__BSON_USEM")
    SET(CHAOS_CXX_FLAGS "${CHAOS_CXX_FLAGS} -DBOOST_ASIO_DISABLE_EVENTFD -D__BSON_USEMEMCPY__ -D__BSON_USEMEMCPY__ -DBOOST_ASIO_DISABLE_EVENTFD -mno-unaligned-access -DDISABLE_COMPARE_AND_SWAP")
    SET(CHAOS_CROSS_HOST arm-linux-gnueabihf)
  ELSE()
    IF(${CHAOS_TARGET} MATCHES "arm-linux-2.6")
    MESG("Cross compiling for ARM(soft float) platforms on linux 2.6")
CheckCompiler("CXX" arm-infn-linux-gnueabi-g++)
CheckCompiler("C" arm-infn-linux-gnueabi-gcc)
SET(CHAOS_CROSS_HOST arm-infn-linux-gnueabi)
SET(CHAOS_ENABLE_C11 "Enable C11" OFF)
SET(CHAOS_BOOST_VERSION 64)
      SET(CHAOS_BOOST_MINOR_VERSION 0)
      SET (CHAOS_C_FLAGS "${CHAOS_C_FLAGS} -fno-builtin -DCHAOS_NO_BACKTRACE -DBOOST_ASIO_DISABLE_EVENTFD -D__BSON_USEMEMCPY__ -mcpu=xscale -D__BSON_USEMEMCPY__ -DBOOST_ASIO_DISABLE_EVENTFD -mno-unaligned-access -DDISABLE_COMPARE_AND_SWAP -mfloat-abi=soft")
SET(CHAOS_CXX_FLAGS "${CHAOS_CXX_FLAGS} ${CHAOS_C_FLAGS}")
SET(CHAOS_BOOST_FLAGS toolset=gcc-arm target-os=linux)
SET(CHAOS_DISABLE_EVENTFD ON)
 set(CMAKE_EXE_LINK_DYNAMIC_C_FLAGS)       # remove -Wl,-Bdynamic
  set(CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS)

    ELSE()
IF(${CHAOS_TARGET} MATCHES "i686-linux26")
  SET(CHAOS_ENABLE_C11 "Enable C11" OFF)
  MESG("Cross compiling for i686 platforms on linux 2.6")
  CheckCompiler("CXX" i686-nptl-linux-gnu-g++)
  CheckCompiler("C" i686-nptl-linux-gnu-gcc)
  SET(CHAOS_CROSS_HOST i686-nptl-linux-gnu)
  SET(CHAOS_CXX_FLAGS "${CHAOS_CXX_FLAGS} -DCHAOS_NO_BACKTRACE -DBOOST_ASIO_DISABLE_EVENTFD")
  SET(CHAOS_BOOST_FLAGS target-os=linux)
  SET(CHAOS_DISABLE_EVENTFD ON)
 set(CMAKE_EXE_LINK_DYNAMIC_C_FLAGS)       # remove -Wl,-Bdynamic
  set(CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS)

ELSE()
  IF(${CHAOS_TARGET} MATCHES "crio90xx")
    MESG("Cross compiling for crio90xx")
    CheckCompiler("CXX" arm-nilrt-linux-gnueabi-g++)
    CheckCompiler("C" arm-nilrt-linux-gnueabi-gcc)

    SET(CHAOS_DISABLE_EVENTFD ON)
    SET(CHAOS_LINKER_FLAGS "${CHAOS_LINKER_FLAGS} -L/usr/local/chaos/oecore-x86_64/sysroots/armv7a-vfp-neon-nilrt-linux-gnueabi/lib")
    SET(CHAOS_CROSS_HOST arm-nilrt-linux-gnueabi)
    SET(CHAOS_CXX_FLAGS "${CHAOS_CXX_FLAGS} -march=armv7-a -mthumb-interwork -mfloat-abi=softfp -mfpu=neon -mno-unaligned-access --sysroot=/usr/local/chaos/oecore-x86_64/sysroots/armv7a-vfp-neon-nilrt-linux-gnueabi -L/usr/local/chaos/oecore-x86_64/sysroots/armv7a-vfp-neon-nilrt-linux-gnueabi/lib -DBOOST_ASIO_DISABLE_EVENTFD")
    SET(CHAOS_BOOST_FLAGS target-os=linux)
  ELSE()
    ERROR("UNSUPPORTED CHAOS_TARGET ${CHAOS_TARGET}")
  ENDIF()
ENDIF()
    ENDIF()
  ENDIF()
  IF(NOT CMAKE_CXX_COMPILER)
    ERROR("CANNOT FOUND COMPILER FOR ${CHAOS_TARGET}, \"${CHAOS_CROSS_HOST}-g++\" should be found in path")
  ENDIF()
ENDIF()

 #W#IF(NOT CMAKE_CXX_COMPILER)
 #W###   project(config)
 #W### ENDIF()

  

  

  IF(CHAOS_STATIC)
  MESG("Enabling Static compilation")
  SET(BUILD_FORCE_STATIC 1)
  SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
  ADD_DEFINITIONS(-DCHAOS_STATIC)
  SET(CHAOS_LINKER_FLAGS "-static")
  SET(CMAKE_EXE_LINKER_FLAGS "-static")
  SET(BUILD_SHARED_LIBRARIES OFF)
  SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)
  SET(CMAKE_SHARED_LIBRARY_LINK_CC_FLAGS)
  set(CMAKE_EXE_LINK_DYNAMIC_C_FLAGS)       # remove -Wl,-Bdynamic
  set(CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS)
#    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINK_SEARCH_END_STATIC 1)
ELSE()
  SET(BUILD_SHARED_LIBRARIES ON)
ENDIF()

set (CMAKE_EXE_LINKER_FLAGS ${CHAOS_LINKER_FLAGS} CACHE STRING "Linker flags")

IF(CHAOS_CROSS_HOST)
  SET( CROSS_HOST "--host=${CHAOS_CROSS_HOST}")
ENDIF()

MESSAGE("WIN32 CMAKE_BINARY_DIR" ${CMAKE_BINARY_DIR})
SET(EXTERNAL_BUILD_DIR ${CMAKE_CURRENT_LIST_DIR}/../external-${CHAOS_POSTFIX})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build-${CHAOS_POSTFIX})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build-${CHAOS_POSTFIX})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build-${CHAOS_POSTFIX})

get_filename_component(CHAOS_CXX_COMPILER_REL ${CMAKE_CXX_COMPILER} NAME)
get_filename_component(CHAOS_C_COMPILER_REL ${CMAKE_C_COMPILER} NAME)
######

#### TOOL VERSIONS
if( CHAOS_BOOST_VERSION)
  SET(BOOST_VERSION ${CHAOS_BOOST_VERSION})
  SET(BOOST_MINOR_VERSION ${CHAOS_BOOST_MINOR_VERSION})
ELSE()
  SET(BOOST_VERSION 64)
  SET(BOOST_MINOR_VERSION 0)
ENDIF()

INCLUDE_DIRECTORIES(${CHAOS_FRAMEWORK})


SET( CMAKE_CHAOS  $ENV{CHAOS_CMAKE_FLAGS})


INCLUDE_DIRECTORIES(. ${PROJECT_SOURCE_DIR} ${CMAKE_INSTALL_PREFIX}/include)
LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY} ${CMAKE_INSTALL_PREFIX}/lib)


IF (DEFINED PROJECT_NAME)
  FILE(GLOB conf_src conf/*)
  FILE(GLOB perf_src perf/*)
  INSTALL(FILES ${conf_src} ${perf_src} DESTINATION etc/${PROJECT_NAME})
ENDIF()
SET(CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX} )
SET(CMAKE_LIBRARY_PATH ${CMAKE_INSTALL_PREFIX}/lib)
SET(CMAKE_FRAMEWORK_PATH ${CMAKE_LIBRARY_PATH})

MESG("Chaos Generic settings dir ${CMAKE_CURRENT_SOURCE_DIR} CHAOS_FRAMEWORK: ${CHAOS_FRAMEWORK} on ${PROJECT_NAME}")
MESG("Host System      : ${CHAOS_SYSTEM_NAME}-${CHAOS_SYSTEM_MACHINE}")
MESG("Installation Dir : ${CMAKE_INSTALL_PREFIX}")
MESG("CXX compiler     : ${CMAKE_CXX_COMPILER}")
MESG("CXX Flags        : ${CHAOS_CXX_FLAGS}")
MESG("C compiler       : ${CMAKE_C_COMPILER}")
MESG("C Flags          : ${CHAOS_C_FLAGS}")
MESG("Linker Flags     : ${CHAOS_LINKER_FLAGS}")
MESG("Parallel build   : ${PROCESSOR_COUNT}")
MESG("Framework libs   : ${FrameworkLib}")
MESG("BUILD TYPE:${CMAKE_BUILD_TYPE}")

 if(NOT EXISTS "${CMAKE_INSTALL_PREFIX}")
  FILE(MAKE_DIRECTORY ${CMAKE_INSTALL_PREFIX})
 ENDIF()

 FILE(COPY ${CMAKE_CURRENT_LIST_DIR}/Findchaos.cmake DESTINATION ${CMAKE_INSTALL_PREFIX}/)
 FILE(COPY ${CMAKE_CURRENT_LIST_DIR}/CMakeMacroUtilsWin.txt DESTINATION ${CMAKE_INSTALL_PREFIX}/)
