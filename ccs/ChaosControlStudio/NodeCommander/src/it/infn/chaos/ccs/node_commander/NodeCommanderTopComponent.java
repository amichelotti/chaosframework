/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.infn.chaos.ccs.node_commander;

import it.infn.chaos.ccs.low_api.node.UnitServerNode;
import it.infn.chaos.ccs.unit_server_editor.UnitServerEditor;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//it.infn.chaos.ccs.node_commander//NodeCommander//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "NodeCommanderTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true, position = 20)
@ActionID(category = "Window", id = "it.infn.chaos.ccs.node_commander.NodeCommanderTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_NodeCommanderAction",
        preferredID = "NodeCommanderTopComponent"
)
@Messages({
    "CTL_NodeCommanderAction=NodeCommander",
    "CTL_NodeCommanderTopComponent=NodeCommander Window",
    "HINT_NodeCommanderTopComponent=This is a NodeCommander window"
})
public final class NodeCommanderTopComponent extends TopComponent {

    public NodeCommanderTopComponent() {
        initComponents();
        setName(Bundle.CTL_NodeCommanderTopComponent());
        setToolTipText(Bundle.HINT_NodeCommanderTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonNewUnitServer = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(260, 32767));
        setPreferredSize(new java.awt.Dimension(240, 240));

        org.openide.awt.Mnemonics.setLocalizedText(jButtonNewUnitServer, org.openide.util.NbBundle.getMessage(NodeCommanderTopComponent.class, "NodeCommanderTopComponent.jButtonNewUnitServer.text")); // NOI18N
        jButtonNewUnitServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewUnitServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNewUnitServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNewUnitServer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNewUnitServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewUnitServerActionPerformed
        TopComponent tc = new UnitServerEditor(new UnitServerNode());
        tc.open();
        tc.requestActive();
        tc.requestFocus();
    }//GEN-LAST:event_jButtonNewUnitServerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonNewUnitServer;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
